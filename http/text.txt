I'm learning Erlang
this is my first attempt...a message router for a chat

%this module acts as a proxy for the clients
%name of the module it shall be the same as the file name
-module(message_router).

-define(SERVER,message_router).

-compile(export_all).
start() ->
    Pid = spawn(message_router,route_messages,[dict:new()]),
    erlang:register(?SERVER,Pid).

stop() ->%shutdown is a command
    ?SERVER ! shutdown.

send_chat_message(Addresse,MessageBody) ->
    ?SERVER ! {send_chat_msg,Addresse, MessageBody}.

register_nick(ClientName, PrintFun) ->
    ?SERVER ! {register_nick,ClientName,PrintFun}.
unregister_nick(ClientName) ->  
    ?SERVER ! {unregister_nick, ClientName}.
%function
route_messages(Clients)->  %wrapper function  of the receive block
    receive  % receive block we use it when we want to receive messages from other processes
	{send_chat_msg, ClientName, MessageBody} -> %tuple {erlang atom(describing the action that the mess represent),variable,var)
	    ?SERVER ! {recv_chat_msg,ClientName, MessageBody}, %send another erlang message{atom,variable}
	    route_messages(Clients); %call to it self recursive form to make a loop
	{recv_chat_msg,ClientName, MessageBody} -> 
	    case dict:find(ClientName,Clients) of
		{ok, PrintFun} ->
		    PrintFun(MessageBody);
		error ->
		    io:format("unknown client ~n")
	    end,
	    route_messages(Clients);
	{register_nick,ClientName,PrintFun} ->
	    route_messages(dict:store(ClientName,PrintFun,Clients));
	{unregister_nick, ClientName} ->
	    route_messages(dict:erase(ClientName, Clients));
	shutdown ->
	    io:format("Shutting down...~n");
	Oops ->% a message that we did not expected
	    io:format("Warning! Received: ~p~n",[Oops]),
		route_messages(Clients)%call to it self recursive form to make a loop
    end.
